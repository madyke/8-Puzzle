(defun generateSuccessors (L openList)
	(let (p swap1 swap2)
		(setf p (copy-list L) )
		
		(cond
			((= (car L) 0) 
				(	
					(setf swap1 (nth 1 L) ) 
					(setf (nth 1 p) 0 )
					(setf (nth 0 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 3 L) ) 
					(setf (nth 3 p) 0 )
					(setf (nth 0 p) swap1 )
					(append openList p)
				) 
			)
			((= (nth L) 1) )
				(	
					(setf swap1 (nth 0 L) ) 
					(setf (nth 0 p) 0 )
					(setf (nth 1 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 2 L) ) 
					(setf (nth 2 p) 0 )
					(setf (nth 1 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 4 L) ) 
					(setf (nth 4 p) 0 )
					(setf (nth 1 p) swap1 )
					(append openList p)
				)
			((= (nth L) 2) )
				(	
					(setf swap1 (nth 1 L) ) 
					(setf (nth 1 p) 0 )
					(setf (nth 2 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 5 L) ) 
					(setf (nth 5 p) 0 )
					(setf (nth 2 p) swap1 )
					(append openList p)
				) 
			((= (nth L) 3) )
				(	
					(setf swap1 (nth 0 L) ) 
					(setf (nth 0 p) 0 )
					(setf (nth 3 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 6 L) ) 
					(setf (nth 6 p) 0 )
					(setf (nth 3 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 4 L) ) 
					(setf (nth 4 p) 0 )
					(setf (nth 3 p) swap1 )
					(append openList p)
				)
			((= (nth L) 4) )
				(	
					(setf swap1 (nth 1 L) ) 
					(setf (nth 1 p) 0 )
					(setf (nth 4 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 5 L) ) 
					(setf (nth 5 p) 0 )
					(setf (nth 4 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 3 L) ) 
					(setf (nth 3 p) 0 )
					(setf (nth 4 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 7 L) ) 
					(setf (nth 7 p) 0 )
					(setf (nth 4 p) swap1 )
					(append openList p)
				)
			((= (nth L) 5) )
				(	
					(setf swap1 (nth 2 L) ) 
					(setf (nth 2 p) 0 )
					(setf (nth 5 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 8 L) ) 
					(setf (nth 8 p) 0 )
					(setf (nth 5 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 4 L) ) 
					(setf (nth 4 p) 0 )
					(setf (nth 5 p) swap1 )
					(append openList p)
				)
			((= (nth L) 6) )
				(	
					(setf swap1 (nth 3 L) ) 
					(setf (nth 3 p) 0 )
					(setf (nth 6 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 7 L) ) 
					(setf (nth 7 p) 0 )
					(setf (nth 6 p) swap1 )
					(append openList p)
				) 
			((= (nth L) 7) )
				(	
					(setf swap1 (nth 6 L) ) 
					(setf (nth 6 p) 0 )
					(setf (nth 7 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 8 L) ) 
					(setf (nth 8 p) 0 )
					(setf (nth 7 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 4 L) ) 
					(setf (nth 4 p) 0 )
					(setf (nth 7 p) swap1 )
					(append openList p)
				)
			((= (nth L) 8) )
				(	
					(setf swap1 (nth 5 L) ) 
					(setf (nth 5 p) 0 )
					(setf (nth 8 p) swap1 )
					(append openList p)
				)
				(
					(setf swap1 (nth 7 L) ) 
					(setf (nth 7 p) 0 )
					(setf (nth 8 p) swap1 )
					(append openList p)
				) 
		)
	)
)