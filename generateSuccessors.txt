(defun generateSuccessors (L openList)
	(let (p)
		(cond
			((= (nth 0 L) 0)
					(setf p (copy-list L) )
					(rotatef (nth 1 p) (nth 0 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 3 p) (nth 0 p) )
					(append openList p)
			)
			((= (nth 1 L) 0) 
					(setf p (copy-list L) )
					(rotatef (nth 0 p) (nth 1 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 2 p) (nth 1 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 4 p) (nth 1 p) )
					(append openList p)
			)
			((= (nth 2 L) 0)
					(setf p (copy-list L) )	
					(rotatef (nth 1 p) (nth 2 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 5 p) (nth 2 p) )
					(append openList p)	
			)
			((= (nth 3 L) 0)
					(setf p (copy-list L) )
					(rotatef (nth 0 p) (nth 3 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 4 p) (nth 3 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 6 p) (nth 3 p) )
					(append openList p)
			)
			((= (nth 4 L) 0)
					(setf p (copy-list L) )
					(rotatef (nth 1 p) (nth 4 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 3 p) (nth 4 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 5 p) (nth 4 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 7 p) (nth 4 p) )
					(append openList p)
			)
			((= (nth 5 L) 0)
					(setf p (copy-list L) )
					(rotatef (nth 2 p) (nth 5 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 4 p) (nth 5 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 8 p) (nth 5 p) )
					(append openList p)
			)
			((= (nth 6 L) 0)
					(setf p (copy-list L) )
					(rotatef (nth 3 p) (nth 6 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 7 p) (nth 6 p) )
					(append openList p)
			)
			((= (nth 7 L) 0)
					(setf p (copy-list L) )
					(rotatef (nth 6 p) (nth 7 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 4 p) (nth 7 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 8 p) (nth 7 p) )
					(append openList p)
			)
			((= (nth 8 L) 0)
					(setf p (copy-list L) )
					(rotatef (nth 5 p) (nth 8 p) )
					(append openList p)
					(setf p (copy-list L) )
					(rotatef (nth 7 p) (nth 8 p) )
					(append openList p)
			)
		)
	)
)